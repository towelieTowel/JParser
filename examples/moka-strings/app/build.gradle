/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    
    //Dependencies are kept in src/main/resources/libs
    implementation fileTree('src/main/resources/libs/')
}

application {
    // Extension needed to build app correctly
    mainClass = 'moka.StringParser'
}

jar {
    manifest {
        attributes('Main-Class': 'moka.StringParser')
    }
}

/* --------------------Custom tasks----------------------*/

task runApp(type: JavaExec) {
   classpath = sourceSets.main.runtimeClasspath

   mainClass = 'moka.StringParser'

   // arguments to pass to the application
   args '../resources/TornadoWithFinal.class'
 }

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

/*
*  task cleanup is meant to be run after every build because,
*  library jar builds and other automated output is not necessary 
*  for this application.
*  
*  This task can be safely deleted but will result in unusable
*  jar files in build/libs due to this build.gradle script's 
*  lack of configuration for such a task.
*/
task cleanup(type: Delete) {
    def libs = file('build/libs')
    def generated = file('build/generated') 
    def tmp = file('build/tmp')
    def resources = file('build/resources')
    def scripts = file('build/scripts')
    def testResults = file('build/test-results')

    doFirst {
        println 'Deleting build/libs/'
        println 'Deleting build/generated/'
        println 'Deleting build/tmp/'
        println 'Deleting build/resources/'
        println 'Deleting build/scripts/'
        println 'Deleting build/test-results'
    }

    delete libs
    delete generated
    delete tmp 
    delete resources 
    delete scripts

    /* We can delete test-results dir because useful report data
    *  is stored in /build/reports 
    */ 
    delete testResults 
}
